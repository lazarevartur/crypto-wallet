import { Contract } from 'web3-eth-contract';
import { AbiItem } from 'web3-utils';
import { web3 } from '../config/Web3React/Web3Provider';
import abi from '../contractsAbi/Token.json';



const contractAddress = '0x1ba4454683284395Ec26b16A6FC9122434736028'


interface IWeb3ContractService {
     abi: AbiItem[]
     contractAddress: string
}

export interface IContractResponse {
    blockHash: string;
    blockNumber: number;
    contractAddress: null;
    cumulativeGasUsed: number;
    effectiveGasPrice: string;
    from: string;
    gasUsed: number;
    logsBloom: string;
    status: boolean;
    to: string;
    transactionHash: string;
    transactionIndex: number;
    type: string;
}

export interface IError {
    code:    number;
    message: string;
    stack:   string;
}


class Web3ContractService implements IWeb3ContractService{
    readonly abi: AbiItem[]
    readonly contractAddress: string
    readonly contract: Contract
    constructor(abi: AbiItem[], contractAdress: string ) {
        this.contractAddress = contractAdress
        this.abi = abi
        this.contract = new web3.eth.Contract(this.abi, this.contractAddress)
    }
    getBalance = async (account: string): Promise<[any | null, IError | null]> => {
        try {
            const response = await this.contract.methods.balanceOf(account).call()
            return [response, null]
        } catch (error) {
            console.log(error);
            return [null, error as IError]
            
        }
   }

   mint = async (account: string, wai: string): Promise<[IContractResponse | null, IError | null]> => {
    try {
        const response = await this.contract.methods.mint(account, wai).send({ from: account })
        return [response as IContractResponse, null]
    } catch (error) {
        console.log(error);
        return [null, error as IError]
    }
   }
    

}

export default new Web3ContractService(abi as AbiItem[], contractAddress)
// Generated by https://quicktype.io


